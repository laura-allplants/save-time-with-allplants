{"version":3,"sources":["logo.svg","ActivityAndTime.js","ActivitiesDatabase.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","ActivityAndTime","randomColor","this","props","displayColor","document","documentElement","style","backgroundColor","className","key","Math","random","color","id","activity","time","onClick","handleClick","React","Component","activities","App","generateRandomActivity","randomActivity","setState","shuffleActivities","state","randomNumber","floor","length","array","sort","colors","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uKAAAA,EAAOC,QAAU,IAA0B,kC,4GCgC5BC,G,kLA3BX,IAAMC,EAAcC,KAAKC,MAAMC,eAI/B,OAHaC,SAASC,gBACjBC,MAAMC,gBAAkBP,EAG3B,yBAAKM,MAAO,CAAEC,gBAAiB,SAAWC,UAAU,eAClD,yBACEA,UAAU,SACVC,IAAKC,KAAKC,SACVL,MAAO,CAAEM,MAAOZ,IAEhB,wBAAIa,GAAG,YAAYZ,KAAKC,MAAMY,UAC9B,wBAAID,GAAG,QACJZ,KAAKC,MAAMa,KAAOd,KAAKC,MAAMa,KAAO,YAGzC,4BACEF,GAAG,cACHG,QAASf,KAAKC,MAAMe,aAFtB,gC,GAlBsBC,IAAMC,YCgDrBC,EAnDE,CAChB,CACG,SAAY,2CACZ,KAAQ,UACL,CACH,SAAY,+BACZ,KAAQ,UACL,CACH,SAAY,yCACZ,KAAQ,UACL,CACH,SAAY,8CACZ,KAAQ,aACL,CACH,SAAY,sDACZ,KAAQ,UACL,CACH,SAAY,kEACZ,KAAQ,UACR,CACH,SAAY,4CACZ,KAAQ,SACL,CACH,SAAY,6BACZ,KAAQ,UACL,CACH,SAAY,0GACZ,KAAQ,SACL,CACH,SAAY,0CACZ,KAAQ,UACL,CACH,SAAY,wCACZ,KAAQ,UACL,CACH,SAAY,oDACZ,KAAQ,SACL,CACH,SAAY,8BACZ,KAAQ,UACL,CACH,SAAY,2EACZ,KAAQ,uBACL,CACH,SAAY,uCACZ,KAAQ,UACL,CACH,SAAY,mDACZ,KAAQ,WCGMC,E,kDA5Cb,aAAe,IAAD,8BACZ,gBAeFJ,YAAc,WACZ,IAAMK,EAAyB,EAAKC,iBACpC,EAAKC,SAAS,CACZV,SAAUQ,EAAuBR,SACjCC,KAAMO,EAAuBP,OAE/B,EAAKU,kBAAkBL,IApBvB,EAAKM,MAAQ,CACXZ,SAAUM,EAAW,GAAGN,SACxBC,KAAMK,EAAW,GAAGL,MAJV,E,6DAQZ,IAAMY,EAAejB,KAAKkB,MAAMlB,KAAKC,SAAWS,EAAWS,QAC3D,OAAOT,EAAWO,K,wCAGFG,GAChB,OAAOA,EAAMC,MAAK,kBAAIrB,KAAKC,SAAS,Q,oCAapC,IAAMqB,EAAS,CAAC,UAAU,UAAU,UAAU,UAAU,WAExD,OADcA,EAAOtB,KAAKkB,MAAMlB,KAAKC,SAAWqB,EAAOH,W,+BAKvD,OACE,6BACE,kBAAC,EAAD,eACE1B,aAAcF,KAAKD,YACnBiB,YAAahB,KAAKgB,aACdhB,KAAKyB,a,GAtCDR,IAAMC,WCMJc,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFpC,SAASqC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.62b07d34.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\nimport \"./App.css\";\n\nclass ActivityAndTime extends React.Component {\n  render() {\n    const randomColor = this.props.displayColor();\n    const html = document.documentElement;\n    html.style.backgroundColor = randomColor;\n\n    return (\n      <div style={{ backgroundColor: \"white\" }} className=\"activitybox\">\n        <div\n          className=\"fadeIn\"\n          key={Math.random()}\n          style={{ color: randomColor }}\n        >\n          <h1 id=\"activity\">{this.props.activity}</h1>\n          <h5 id=\"time\">\n            {this.props.time ? this.props.time : \"Unknown\"}\n          </h5>\n        </div>\n        <button\n          id=\"newActivity\"\n          onClick={this.props.handleClick}\n        >\n          GIVE ME SOMETHING TO DO\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default ActivityAndTime;","const activities=[\n\t{\n    \"activity\": \"Watch an episode of your favourite show.\",\n    \"time\": \"32mins\"\n    }, {\n    \"activity\": \"Follow a youtube yoga video.\",\n    \"time\": \"28mins\"\n    }, {\n    \"activity\": \"Read your kids a bedtime story (or 5).\",\n    \"time\": \"15mins\"\n    }, {\n    \"activity\": \"Call your mother and ask her about her day.\",\n    \"time\": \"10-30mins\"\n    }, {\n    \"activity\": \"Bake a batch of chocolate chip cookies for dessert.\",\n    \"time\": \"40mins\"\n    }, {\n    \"activity\": \"Learn how to say 'do you do vegan options' in another language.\",\n    \"time\": \"10mins\"\n\t}, {\n\t\"activity\": \"Beat your partner's score on Candy Crush.\",\n\t\"time\": \"6mins\"\n\t}, {\n\t\"activity\": \"Actually fold the laundry.\",\n\t\"time\": \"20mins\"\n\t}, {\n\t\"activity\": \"Hoover the miscellaneous debris your partner, pets and/or kids brought in from the outside world today.\",\n\t\"time\": \"8mins\"\n\t}, {\n\t\"activity\": \"Finally start a bullet journal (maybe).\",\n\t\"time\": \"30mins\"\n\t}, {\n\t\"activity\": \"Binge another episode of Killing Eve.\",\n\t\"time\": \"45mins\"\n\t}, {\n\t\"activity\": \"Make an appointment you’ve been putting off.\",\n\t\"time\": \"5mins\"\n\t}, {\n\t\"activity\": \"Open that pile of letters..\",\n\t\"time\": \"6mins+\"\n\t}, {\n\t\"activity\": \"Find the quietest corner of the house and have some ‘me’ time.\",\n\t\"time\": \"as long as you need\"\n\t}, {\n\t\"activity\": \"Get outside and go for a short walk.\",\n\t\"time\": \"25mins\"\n\t}, {\n\t\"activity\": \"Take a bath and bring out the fancy bubble bath.\",\n\t\"time\": \"40mins\"\n\t}\n]\nexport default activities","import React from 'react';\nimport logo from './logo.svg';\nimport ActivityAndTime from \"./ActivityAndTime\";\nimport activities from './ActivitiesDatabase';\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      activity: activities[0].activity,\n      time: activities[0].time,\n    };\n  }\n  randomActivity() {\n    const randomNumber = Math.floor(Math.random() * activities.length);\n    return activities[randomNumber];\n    \n  }\n  shuffleActivities(array){\n    return array.sort(()=>Math.random()-0.5)\n  }\n\n  handleClick = () => {\n    const generateRandomActivity = this.randomActivity();\n    this.setState({\n      activity: generateRandomActivity.activity,\n      time: generateRandomActivity.time\n    });\n    this.shuffleActivities(activities)\n  };\n\n  randomColor() {\n    const colors = ['#213852','#05574A','#5E4563','#DE613D','#EBBAB2'];\n    const color = colors[Math.floor(Math.random() * colors.length)];\n    return color;\n  }\n  \n  render() {\n    return (\n      <div>\n        <ActivityAndTime\n          displayColor={this.randomColor}\n          handleClick={this.handleClick}\n          {...this.state}\n        />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}